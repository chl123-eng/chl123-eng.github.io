{"title":"Vue2.6源码解析之diff算法更新过程及其相关问题","uid":"d808854a301e8b255f9b814d0115997a","slug":"Vue2.6源码解析之diff算法更新过程及其相关问题","date":"2021-12-25T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue2.6源码解析之diff算法更新过程及其相关问题.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","content":"<p>每次面试都会被面试官问到 diff 算法，每次都看别人文章，过了就忘。最近抽空自己看看源码，自己在不<br>借助其他人文章思路的情况下，自己死磕源码，总结出自己的一些心得，ps：下次再也不用一直找别人文章看</p>\n<h2 id=\"从问题说起？\"><a href=\"#从问题说起？\" class=\"headerlink\" title=\"从问题说起？\"></a>从问题说起？</h2><ol>\n<li>diff 算法是怎么对比的？</li>\n<li>遇到了 v-for 绑定的 key 值为 index 导致删除列表的某一项，删除的却是始终是最后一项的情况。</li>\n<li>没绑定 index，删除后也会出现始终删除最后一项的问题。</li>\n<li>官网说的默认使用旧地复用在哪里体现？</li>\n</ol>\n<p>具体看下图代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content-body&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in selectionConditionList&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">v-selection-condition-list</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-selection-condition-list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;deleteSelectionCondition(index)&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;addNewSelectionTask&quot;</span>&gt;</span>新建任务<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vSelectionConditionList = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">inputName</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>(),</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`&lt;input type=&quot;text&quot; :value=&quot;inputName&quot;&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;.content-body&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">selectionConditionList</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 添加</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">addNewSelectionTask</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">selectionConditionList</span>.<span class=\"title function_\">push</span>(&#123;&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 删除</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">deleteSelectionCondition</span>(<span class=\"params\">index</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;delete..&quot;</span> + index);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">selectionConditionList</span>.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      vSelectionConditionList,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决问题先看看源码\"><a href=\"#解决问题先看看源码\" class=\"headerlink\" title=\"解决问题先看看源码\"></a>解决问题先看看源码</h2><p>下面代码会去掉一些非核心的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/core/vdom/patch.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  parentElm,</span></span><br><span class=\"line\"><span class=\"params\">  oldCh,</span></span><br><span class=\"line\"><span class=\"params\">  newCh,</span></span><br><span class=\"line\"><span class=\"params\">  insertedVnodeQueue,</span></span><br><span class=\"line\"><span class=\"params\">  removeOnly</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span>; <span class=\"comment\">// 旧起始标记 默认0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span>; <span class=\"comment\">// 新起始标记 默认0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldEndIdx = oldCh.<span class=\"property\">length</span> - <span class=\"number\">1</span>; <span class=\"comment\">// 旧的最后一个的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]; <span class=\"comment\">// 旧的第一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]; <span class=\"comment\">// 旧的最后一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newEndIdx = newCh.<span class=\"property\">length</span> - <span class=\"number\">1</span>; <span class=\"comment\">// 新的最后一个的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]; <span class=\"comment\">// 新的第一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]; <span class=\"comment\">// 新的最后一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// removeOnly是一个特殊标志，仅由&lt;transition group&gt;使用，以确保在离开转换期间被删除的元素保持在正确的相对位置</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> canMove = !removeOnly;</span><br><span class=\"line\">  <span class=\"comment\">// 判断新节点是否存在重复的key</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">checkDuplicateKeys</span>(newCh);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 起始对比</span></span><br><span class=\"line\">  <span class=\"comment\">// 当旧起始index小于等于旧的旧的结束index 并且 新起始小于等于新结束index</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果旧起始节点未定义</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldStartVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 旧起始节点下标进1位 +1</span></span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx]; <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldEndVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果旧的结束节点未定义 那么下标就退一位 -1</span></span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果新旧起始节点是同个节点 那么就进行下一层的对比 并且两者下标都进一位 +1</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">        oldStartVnode,</span><br><span class=\"line\">        newStartVnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        newCh,</span><br><span class=\"line\">        newStartIdx</span><br><span class=\"line\">      );</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果新旧结束节点是同个节点 那么就进行下一层的对比 并且两者下标都退一位 1</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">        oldEndVnode,</span><br><span class=\"line\">        newEndVnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        newCh,</span><br><span class=\"line\">        newEndIdx</span><br><span class=\"line\">      );</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果旧起始节点和新结束是同个节点，那么进行下一层对比 旧起始进一位+1 新起始节点退一位-1</span></span><br><span class=\"line\">      <span class=\"comment\">// 并且把 那么就把旧起始节点插入到旧结束节点的前面</span></span><br><span class=\"line\">      <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">        oldStartVnode,</span><br><span class=\"line\">        newEndVnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        newCh,</span><br><span class=\"line\">        newEndIdx</span><br><span class=\"line\">      );</span><br><span class=\"line\">      canMove &amp;&amp;</span><br><span class=\"line\">        nodeOps.<span class=\"title function_\">insertBefore</span>(</span><br><span class=\"line\">          parentElm,</span><br><span class=\"line\">          oldStartVnode.<span class=\"property\">elm</span>,</span><br><span class=\"line\">          nodeOps.<span class=\"title function_\">nextSibling</span>(oldEndVnode.<span class=\"property\">elm</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果旧结束和新起始是同个节点，那么进行下一层对比 旧结束退一位-1 新起始节点进一位+1</span></span><br><span class=\"line\">      <span class=\"comment\">// 并且把 那么就把旧起始节点插入到旧结束节点的位置</span></span><br><span class=\"line\">      <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">        oldEndVnode,</span><br><span class=\"line\">        newStartVnode,</span><br><span class=\"line\">        insertedVnodeQueue,</span><br><span class=\"line\">        newCh,</span><br><span class=\"line\">        newStartIdx</span><br><span class=\"line\">      );</span><br><span class=\"line\">      canMove &amp;&amp;</span><br><span class=\"line\">        nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldEndVnode.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>);</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果旧数据没有绑定key值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldKeyToIdx))</span><br><span class=\"line\">        <span class=\"comment\">// oldKeyToIdx存储当前旧数据区间的key值为key当前的索引</span></span><br><span class=\"line\">        oldKeyToIdx = <span class=\"title function_\">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前新数据有key的话  idxInOld就等于oldKeyToIdx的key项的索引</span></span><br><span class=\"line\">      <span class=\"comment\">// findIdxInOld拿当前新开始节点，通过判断旧起始-结束节点之中有没有其位置，找出当前新开始在旧中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 无key情况下</span></span><br><span class=\"line\">      <span class=\"comment\">//    如果新节点不存在于旧节点中，那么就作为新增节点加入插入到oldStartNode前面</span></span><br><span class=\"line\">      <span class=\"comment\">// 有key情况下 直接获取当前节点在旧的之前的位置</span></span><br><span class=\"line\">      idxInOld = <span class=\"title function_\">isDef</span>(newStartVnode.<span class=\"property\">key</span>)</span><br><span class=\"line\">        ? oldKeyToIdx[newStartVnode.<span class=\"property\">key</span>]</span><br><span class=\"line\">        : <span class=\"title function_\">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">      <span class=\"comment\">// 如果如果没有index 那么就直接创建元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(idxInOld)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有找到 那么就在当前索引前面插入新元素</span></span><br><span class=\"line\">        <span class=\"title function_\">createElm</span>(</span><br><span class=\"line\">          newStartVnode,</span><br><span class=\"line\">          insertedVnodeQueue,</span><br><span class=\"line\">          parentElm,</span><br><span class=\"line\">          oldStartVnode.<span class=\"property\">elm</span>,</span><br><span class=\"line\">          <span class=\"literal\">false</span>,</span><br><span class=\"line\">          newCh,</span><br><span class=\"line\">          newStartIdx</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 有index就直接复用元素</span></span><br><span class=\"line\">        vnodeToMove = oldCh[idxInOld];</span><br><span class=\"line\">        <span class=\"comment\">// 同元素情况下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">            vnodeToMove,</span><br><span class=\"line\">            newStartVnode,</span><br><span class=\"line\">            insertedVnodeQueue,</span><br><span class=\"line\">            newCh,</span><br><span class=\"line\">            newStartIdx</span><br><span class=\"line\">          );</span><br><span class=\"line\">          oldCh[idxInOld] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 在前面插入</span></span><br><span class=\"line\">          canMove &amp;&amp;</span><br><span class=\"line\">            nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, vnodeToMove.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">          <span class=\"title function_\">createElm</span>(</span><br><span class=\"line\">            newStartVnode,</span><br><span class=\"line\">            insertedVnodeQueue,</span><br><span class=\"line\">            parentElm,</span><br><span class=\"line\">            oldStartVnode.<span class=\"property\">elm</span>,</span><br><span class=\"line\">            <span class=\"literal\">false</span>,</span><br><span class=\"line\">            newCh,</span><br><span class=\"line\">            newStartIdx</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果对比完成</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果旧起始大于旧结束 说明新的里面的东西都是新增的 就加入</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">    refElm = <span class=\"title function_\">isUndef</span>(newCh[newEndIdx + <span class=\"number\">1</span>]) ? <span class=\"literal\">null</span> : newCh[newEndIdx + <span class=\"number\">1</span>].<span class=\"property\">elm</span>;</span><br><span class=\"line\">    <span class=\"title function_\">addVnodes</span>(</span><br><span class=\"line\">      parentElm,</span><br><span class=\"line\">      refElm,</span><br><span class=\"line\">      newCh,</span><br><span class=\"line\">      newStartIdx,</span><br><span class=\"line\">      newEndIdx,</span><br><span class=\"line\">      insertedVnodeQueue</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果新开始大于新结束，那说明旧的里面的dom是被删除 就移除调</span></span><br><span class=\"line\">    <span class=\"title function_\">removeVnodes</span>(oldCh, oldStartIdx, oldEndIdx);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"diff-算法是怎么-diff？\"><a href=\"#diff-算法是怎么-diff？\" class=\"headerlink\" title=\"diff 算法是怎么 diff？\"></a>diff 算法是怎么 diff？</h2><p>下面用一个例子来做一层模拟 更直观地展示，<strong>上方为 oldVnode，下方为 newVnode，key 为内容数字，且唯一</strong></p>\n<p><img src=\"http://www.xiesmallxie.cn/20211026171121.png\"></p>\n<p>Step1: 新头旧头，新尾旧尾，新头旧尾，新尾旧头对比后，发现并不一致，进入源码中的最后一个 else 内部，进入之后<br>oldKeyToIdx 为 undefined，初始化 oldKeyToIdx 的值。因为 newStartVnode 有值，idxInOld &#x3D; oldKeyToIdx[newStartVnode.key]等于 1，调用 createElement 在 oldStartVnode 前面插入 newStartVnode，newStartIndex++。此时 oldStartIndex：0,oldEndIndex：2，newStartIndex：1，newEndIndex：3</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211026171120.png\"></p>\n<p>Step2: 新头旧头对比后发现都为 1，一致 newStartIndex,oldStartIndex 都+1，当前层不进行复用&#x2F;排列操作，保存本位。此时 oldStartIndex：1,oldEndIndex：2，newStartIndex：2，newEndIndex：3</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211026171120.png\"></p>\n<p>Step3: 旧尾新头对比后发现都为 3，newStartIndex+1，oldEndIndex-1，此时 oldStartIndex：1,oldEndIndex：1，newStartIndex：3，newEndIndex：3</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211026171120.png\"></p>\n<p>Step3: 头尾相比发现都不一致，进入 else 内部，oldKeyToIdx 数组内部没有第 4 个的值 所以在 newStartIndex 前面插入 4，newStartIdx+1，此时 newStartIndex &gt; newOldIndex,就移除旧数组的 oldStartIdx 到 oldEndIdx 的 vnode，也就是 2，最后返回 2134<br><img src=\"http://www.xiesmallxie.cn/20211026171119.png\"><br><img src=\"http://www.xiesmallxie.cn/20211026171118.png\"></p>\n<p>从上图源码来看，可以得出，<strong>diff 算法会依照固定的判断同层级 Vnode 的顺序进行头头，尾尾，头尾，尾头的比较不断收缩 4 个定义的下标的位置<br>来进行 dom 的重排和复用操作</strong></p>\n<h2 id=\"解决第-2，3-个问题-探究下本质\"><a href=\"#解决第-2，3-个问题-探究下本质\" class=\"headerlink\" title=\"解决第 2，3 个问题,探究下本质\"></a>解决第 2，3 个问题,探究下本质</h2><p>为什么会出现 key 绑定为 index，或者不绑定情况下删除会删除最后一项问题呢，<br>这其实涉及到了 vnode 的渲染原理</p>\n<ul>\n<li>假如按照上面代码通过调用编译后的 render 函数调用 _l 方法也就是 renderList 调用 createElement 方法初始化了多个 vnode<br>，在绑定 key 为 index 的情况下 增加 3 个删除第一个，打印 vnode 大概是这样的，</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">旧vnode</span></span><br><span class=\"line\"><span class=\"comment\">children: Array(3)</span></span><br><span class=\"line\"><span class=\"comment\">0: VNode &#123;tag: &quot;li&quot;, data: &#123;…&#125;, children: Array(3), text: undefined, key: 0, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">1: VNode &#123;tag: &quot;li&quot;, data: &#123;…&#125;, children: Array(3), text: undefined, key: 1, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">2: VNode &#123;tag: &quot;li&quot;, data: &#123;…&#125;, children: Array(3), text: undefined, key: 2, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">新vnode</span></span><br><span class=\"line\"><span class=\"comment\">children: Array(2)</span></span><br><span class=\"line\"><span class=\"comment\">0: VNode &#123;tag: &quot;li&quot;, data: &#123;…&#125;, children: Array(3), text: undefined, key: 0, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\">1: VNode &#123;tag: &quot;li&quot;, data: &#123;…&#125;, children: Array(3), text: undefined, key: 1, …&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>由上可知，key 是不变的，但是实际上 dom 内容已经变了。这就会导致在头头对比之中因为双方 key 一致，从而判断为同个 vnode，会使 newStartIdx 和 oldStartIndex 一致向右进 1, 最后 newStarteIndex &gt; newEndIndex, 导致 oldStartIndex 到 oldEndIndex 之间的 vnode 被删除，所以这才会出现删除的总是最后一项的情况。没有绑定 key 时情况也是如此。具体如下图所示</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211026153950.png\"></p>\n<h2 id=\"解决第-4-个问题，就地复用在哪里得到体现？\"><a href=\"#解决第-4-个问题，就地复用在哪里得到体现？\" class=\"headerlink\" title=\"解决第 4 个问题，就地复用在哪里得到体现？\"></a>解决第 4 个问题，就地复用在哪里得到体现？</h2><p>源码中，如果新的节点在旧的节点列表上有出现的 ，那么就会存储当前 Vnode，直接插入到 dom 前面，复用旧 Vnode，不创建新的 dom。如下源码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 拿到旧代码 直接存储</span></span><br><span class=\"line\">  vnodeToMove = oldCh[idxInOld];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patchVnode</span>(</span><br><span class=\"line\">      vnodeToMove,</span><br><span class=\"line\">      newStartVnode,</span><br><span class=\"line\">      insertedVnodeQueue,</span><br><span class=\"line\">      newCh,</span><br><span class=\"line\">      newStartIdx</span><br><span class=\"line\">    );</span><br><span class=\"line\">    oldCh[idxInOld] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在前面插入</span></span><br><span class=\"line\">    canMove &amp;&amp;</span><br><span class=\"line\">      nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, vnodeToMove.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上就是我看源码得出的结论，有疑问的小伙伴可以在下方留言。thanks！！！</p></blockquote>\n","text":"每次面试都会被面试官问到 diff 算法，每次都看别人文章，过了就忘。最近抽空自己看看源码，自己在不借助其他人文章思路的情况下，自己死磕源码，总结出自己的一些心...","permalink":"/post/Vue2.6源码解析之diff算法更新过程及其相关问题","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E9%97%AE%E9%A2%98%E8%AF%B4%E8%B5%B7%EF%BC%9F\"><span class=\"toc-text\">从问题说起？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%85%88%E7%9C%8B%E7%9C%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">解决问题先看看源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#diff-%E7%AE%97%E6%B3%95%E6%98%AF%E6%80%8E%E4%B9%88-diff%EF%BC%9F\"><span class=\"toc-text\">diff 算法是怎么 diff？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%AC%AC-2%EF%BC%8C3-%E4%B8%AA%E9%97%AE%E9%A2%98-%E6%8E%A2%E7%A9%B6%E4%B8%8B%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">解决第 2，3 个问题,探究下本质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%AC%AC-4-%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B0%B1%E5%9C%B0%E5%A4%8D%E7%94%A8%E5%9C%A8%E5%93%AA%E9%87%8C%E5%BE%97%E5%88%B0%E4%BD%93%E7%8E%B0%EF%BC%9F\"><span class=\"toc-text\">解决第 4 个问题，就地复用在哪里得到体现？</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑","uid":"b5ff54a9d086ee4b944aa5321b46f563","slug":"Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03","date":"2022-02-02T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"对于很多用过 vue 这个框架的人来说，想必都用过 keep-alive 组件缓存功能。vue 内部使用了 LRU 缓存淘汰算法来实现组件的缓存更新问题，那 v...","permalink":"/post/Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"总结下前段时间公司项目中的Better-scroll封装","uid":"92857319a9a1729d512b153f0e035994","slug":"总结下前段时间公司项目中的Better-scroll封装","date":"2021-12-21T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/总结下前段时间公司项目中的Better-scroll封装.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/bs01.png","text":"总结下自己前一段时间公司项目使用 Better-scroll 进行总体封装，集成下拉刷新,上拉加载等 12345678910111213141516171819...","permalink":"/post/总结下前段时间公司项目中的Better-scroll封装","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"vue","slug":"vue","count":1,"path":"api/categories/vue.json"},{"name":"经验","slug":"vue/经验","count":1,"path":"api/categories/vue/经验.json"}],"tags":[{"name":"better-scroll","slug":"better-scroll","count":2,"path":"api/tags/better-scroll.json"},{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}