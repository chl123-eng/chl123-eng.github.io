{"title":"uni-app微信小程序实现axios请求拦截器和重复请求中断","uid":"0f52401eaa7baffae19fe63567938437","slug":"uni-app微信小程序实现axios请求拦截器和重复请求中断","date":"2022-12-07T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/uni-app微信小程序实现axios请求拦截器和重复请求中断.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"http://www.xiesmallxie.cn/20211208153631.jpeg","content":"<p>最近在写二手表微信小程序的时候，发现老是会有重复请求的情况，用了函数防抖和布尔拦截之后，又显得非常<br>臃肿，没能从根本上解决问题，刚好 leader 叫我做一下重复请求拦截。可是，当我翻开 flyio 文档之后……</p>\n<h2 id=\"What-the-fuck\"><a href=\"#What-the-fuck\" class=\"headerlink\" title=\"What the fuck\"></a>What the fuck</h2><p>没想到 flyio 竟然没有预设重复请求功能，绝望</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211208153631.jpeg\"></p>\n<h2 id=\"当前目标和处理思路\"><a href=\"#当前目标和处理思路\" class=\"headerlink\" title=\"当前目标和处理思路\"></a>当前目标和处理思路</h2><p>那么我的目标就变成了兼容旧 flyio 的拦截器功能，并且还要实现重复请求拦截功能。对接重复请求拦截，因为我们当前小<br>程序只有微信端，那我就直接换成了微信小程序官方的请求，刚好也有请求中断功能。对于拦截器，基本都是通过 promise 来实现的<br>，那这里就直接自己写一个。</p>\n<h2 id=\"请求和响应拦截的思路\"><a href=\"#请求和响应拦截的思路\" class=\"headerlink\" title=\"请求和响应拦截的思路\"></a>请求和响应拦截的思路</h2><p>通过 Promise.then 实现链式的串行调用，因为前置有请求拦截器，后置有响应拦截器，中间插入请求结构体。整体结构如下图</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211208153630.png?imageMogr2/thumbnail/!50p\"></p>\n<h2 id=\"代码细究\"><a href=\"#代码细究\" class=\"headerlink\" title=\"代码细究\"></a>代码细究</h2><p>整体工具库使用 lodash</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">callFor</span> = (<span class=\"params\">arrayData, fn</span>) =&gt; &#123;</span><br><span class=\"line\">  arrayData.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fn.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>, item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 全局拦截器实例</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Interceptor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// use方法传入Promise两个状态处理语句</span></span><br><span class=\"line\">  <span class=\"title function_\">use</span>(<span class=\"params\">fulfilled, rejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      fulfilled,</span><br><span class=\"line\">      rejected</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主体请求参数 作为promise调用链的入参之一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">requestFn</span> = config =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = config</span><br><span class=\"line\">  <span class=\"comment\">// requestTaskKey 当前重复请求的url标识</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastRequestKey = config.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;requestTaskKey&#x27;</span>) ? config.<span class=\"property\">requestTaskKey</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果全局变量数组里面含有当前的请求，那么就直接中断上一次请求</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    lastRequestKey &amp;&amp;</span><br><span class=\"line\">    <span class=\"title function_\">getApp</span>().<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;requestTasks&#x27;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>.<span class=\"title function_\">hasOwnProperty</span>(lastRequestKey)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;中断了上一次的请求----------------------&#x27;</span>)</span><br><span class=\"line\">      <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>[lastRequestKey].<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">      <span class=\"comment\">// 中断后就应该清除掉</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>[lastRequestKey]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = options.<span class=\"property\">baseURL</span> + options.<span class=\"property\">url</span></span><br><span class=\"line\">    options.<span class=\"property\">url</span> = url</span><br><span class=\"line\">    <span class=\"keyword\">const</span> requestTask = uni.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      ...options,</span><br><span class=\"line\">      <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">        <span class=\"comment\">// 每一次成功之后 就清空当前url在全局变量数组里面的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// request:faile abort为公司自定义的错误请求状态，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">errMsg</span> !== <span class=\"string\">&#x27;request:faile abort&#x27;</span> &amp;&amp; lastRequestKey) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>[lastRequestKey]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">errMsg</span> === <span class=\"string\">&#x27;request:ok&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(&#123; ...res, <span class=\"attr\">request</span>: options &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.<span class=\"property\">errMsg</span> === <span class=\"string\">&#x27;request:fail&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(&#123; ...res, <span class=\"attr\">request</span>: options &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前请求需要支持重复请求的中断，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastRequestKey) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有队列的情况下 全局变量存储队列</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span> = &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 把当前请求塞入存储队列之中</span></span><br><span class=\"line\">      <span class=\"title function_\">getApp</span>().<span class=\"property\">requestTasks</span>[lastRequestKey] = requestTask</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HttpRequest</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 深拷贝配置防止配置被上一个请求修改</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">config</span> = _.<span class=\"title function_\">cloneDeep</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(</span><br><span class=\"line\">      &#123;&#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">header</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">timeout</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      config</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化拦截器</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">interceptors</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">request</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Interceptor</span>(),</span><br><span class=\"line\">    <span class=\"attr\">response</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Interceptor</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">HttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">request</span> = <span class=\"keyword\">function</span> (<span class=\"params\">config = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>, config)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> requestInterceptorChain = [],</span><br><span class=\"line\">    responseInterceptorChain = []</span><br><span class=\"line\">  <span class=\"comment\">// 推入请求拦截器</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">    requestInterceptorChain.<span class=\"title function_\">unshift</span>(obj.<span class=\"property\">fulfilled</span>, obj.<span class=\"property\">rejected</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 推入响应拦截器</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">    responseInterceptorChain.<span class=\"title function_\">push</span>(obj.<span class=\"property\">fulfilled</span>, obj.<span class=\"property\">rejected</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise</span><br><span class=\"line\">  <span class=\"comment\">// 第二个值为undefined是因为要为后面的请求进行补位 这样可以防止流入错误请求</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> chain = [requestFn, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\">  <span class=\"comment\">// request请求拦截插入最前方</span></span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">unshift</span>.<span class=\"title function_\">call</span>(chain, ...requestInterceptorChain)</span><br><span class=\"line\">  <span class=\"comment\">// responese响应插入最后方</span></span><br><span class=\"line\">  chain = chain.<span class=\"title function_\">concat</span>(responseInterceptorChain)</span><br><span class=\"line\">  promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(options)</span><br><span class=\"line\">  <span class=\"comment\">// promise.then串行处理</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (chain.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    promise = promise.<span class=\"title function_\">then</span>(chain.<span class=\"title function_\">shift</span>(), chain.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不同请求格式的差异化处理</span></span><br><span class=\"line\"><span class=\"title function_\">callFor</span>([<span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;put&#x27;</span>, <span class=\"string\">&#x27;patch&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">methodType</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">HttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[methodType] = <span class=\"keyword\">function</span> (<span class=\"params\">url, data = &#123;&#125;, otherConfig = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, &#123; data, url, <span class=\"attr\">method</span>: methodType &#125;, otherConfig)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(config)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">callFor</span>([<span class=\"string\">&#x27;delete&#x27;</span>, <span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;config&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">methodType</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">HttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[methodType] = <span class=\"keyword\">function</span> (<span class=\"params\">url, params = &#123;&#125;, otherConfig = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> config = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, otherConfig, &#123; url, params, <span class=\"attr\">method</span>: methodType &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">request</span>(config)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">HttpRequest</span></span><br></pre></td></tr></table></figure>\n\n<p>这就是我基于 Prmiose 加小程序重复请求封装的核心代码，这里还未涉及到离开页面时的请求中断行为。不过大概思路的话就是收集所有请求的状态，封装成对象，调用时修改状态，后续有时间我会更加深究这部分的代码，更好地服务于业务。</p>\n","text":"最近在写二手表微信小程序的时候，发现老是会有重复请求的情况，用了函数防抖和布尔拦截之后，又显得非常臃肿，没能从根本上解决问题，刚好 leader 叫我做一下重复...","permalink":"/post/uni-app微信小程序实现axios请求拦截器和重复请求中断","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"axios","slug":"axios","count":1,"path":"api/categories/axios.json"},{"name":"微信小程序","slug":"axios/微信小程序","count":1,"path":"api/categories/axios/微信小程序.json"}],"tags":[{"name":"uni-app","slug":"uni-app","count":4,"path":"api/tags/uni-app.json"},{"name":"http","slug":"http","count":4,"path":"api/tags/http.json"},{"name":"微信小程序","slug":"微信小程序","count":2,"path":"api/tags/微信小程序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#What-the-fuck\"><span class=\"toc-text\">What the fuck</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%93%E5%89%8D%E7%9B%AE%E6%A0%87%E5%92%8C%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">当前目标和处理思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E7%9A%84%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">请求和响应拦截的思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%BB%86%E7%A9%B6\"><span class=\"toc-text\">代码细究</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue3自定义图片懒加载指令","uid":"e9f45a92e7df43e08b58c2d1279189cb","slug":"Vue3自定义图片懒加载指令","date":"2023-02-24T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue3自定义图片懒加载指令.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/load.jpeg","text":"之前用习惯了别人的图片懒加载指令，现在自己也试着写了一个，在这里记录下自己过程中的心得体会，当前指令逻辑使用于 vue2 和 vue3 图片懒加载原理使用 ht...","permalink":"/post/Vue3自定义图片懒加载指令","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"vue3","slug":"vue3","count":1,"path":"api/categories/vue3.json"},{"name":"经验","slug":"vue3/经验","count":1,"path":"api/categories/vue3/经验.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":2,"path":"api/tags/Vue3.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"StoryBook-为万表组件库提供文档说明","uid":"8940855b891d4b3c9c870535631ad9ab","slug":"StoryBook-为万表组件库提供文档说明","date":"2022-11-22T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/StoryBook-为万表组件库提供文档说明.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/sb01.png","text":"前言对于公司级组件库来说，服务于业务的组件存在着参数较多，参数经常记不住问题。而且，脆弱的在线调试也为组件使用产生了很大的不便，好在出现了 StoryBook ...","permalink":"/post/StoryBook-为万表组件库提供文档说明","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"经验","slug":"经验","count":6,"path":"api/categories/经验.json"},{"name":"Vue","slug":"经验/Vue","count":1,"path":"api/categories/经验/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"},{"name":"组件库","slug":"组件库","count":2,"path":"api/tags/组件库.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}