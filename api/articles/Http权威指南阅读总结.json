{"title":"Http权威指南阅读总结","uid":"e9c62f00849307d6c77e106ff0b62f1c","slug":"Http权威指南阅读总结","date":"2021-07-04T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Http权威指南阅读总结.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/nw01.jpeg","content":"<h2 id=\"HTTP-基础分层架构\"><a href=\"#HTTP-基础分层架构\" class=\"headerlink\" title=\"HTTP 基础分层架构\"></a>HTTP 基础分层架构</h2><ol>\n<li>应用层: HTTP，DNS，FTP</li>\n<li>传输层: TCP，UDP</li>\n<li>网络层: IP</li>\n<li>数据链路: 控制操作系统、硬件的设备驱 动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等 物理可见部分（还包括连接器等一切传输媒介）。</li>\n</ol>\n<h2 id=\"请求过程每个层的作用\"><a href=\"#请求过程每个层的作用\" class=\"headerlink\" title=\"请求过程每个层的作用\"></a>请求过程每个层的作用</h2><p>HTTP 生成请求报文，TCP 按顺序将报文切割生成多个顺序序号的报文段，把报文段可靠地传输给对方，IP 主要搜索对方的地址，一边中转一遍传送(因为每个地址在同一局域网的情况是很少的，所以可能需要多次中转，使用 ARP 协议解析地址)</p>\n<h2 id=\"HTTP-1-1-特点\"><a href=\"#HTTP-1-1-特点\" class=\"headerlink\" title=\"HTTP&#x2F;1.1 特点\"></a>HTTP&#x2F;1.1 特点</h2><ol>\n<li>connection: keep-alive 持久链接(减少 tcp 建立和资源获取的时间，注: http&#x2F;1.0 并未标准化)</li>\n<li>管线化(不用等待响应就能发送下一次请求)</li>\n</ol>\n<h2 id=\"HTTP-1-1-的客户身份认证方式\"><a href=\"#HTTP-1-1-的客户身份认证方式\" class=\"headerlink\" title=\"HTTP&#x2F;1.1 的客户身份认证方式\"></a>HTTP&#x2F;1.1 的客户身份认证方式</h2><ol>\n<li>BASIC 认证（基本认证）</li>\n<li>DIGEST 认证（摘要认证）</li>\n<li>SSL 客户端认证</li>\n<li>FormBase 认证（基于表单认证）</li>\n</ol>\n<h2 id=\"HTTP-2-0-新增\"><a href=\"#HTTP-2-0-新增\" class=\"headerlink\" title=\"HTTP&#x2F;2.0 新增\"></a>HTTP&#x2F;2.0 新增</h2><ol>\n<li>多路复用流（通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求 的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高）</li>\n<li>赋予请求优先级 （SPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先 级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响 应变慢的问题。）</li>\n<li>压缩 HTTP 首部</li>\n<li>服务端推送</li>\n</ol>\n<h2 id=\"HTTP-报文详解\"><a href=\"#HTTP-报文详解\" class=\"headerlink\" title=\"HTTP 报文详解\"></a>HTTP 报文详解</h2><ol>\n<li>内容压缩 gzip（GNU zip），compress（UNIX 系统的标准压缩），deflateidentity（不进行编码）（zlib）</li>\n</ol>\n<h2 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h2><ul>\n<li>1XX Informational（信息性状态码） 接收的请求正在处理</li>\n<li>2XX Success（成功状态码） 请求正常处理完毕</li>\n<li>3XX Redirection（重定向状态码） 需要进行附加操作以完成请求</li>\n<li>4XX Client Error（客户端错误状态码） 服务器无法处理请求</li>\n<li>5XX Server Error（服务器错误状态码） 服务器处理请求出错</li>\n</ul>\n<p><strong>其中 301(永久重定向)，302(临时重定向) 301 会导致 url 劫持，搜索引擎搜索到的自己发布的内容是在别人的网站上</strong></p>\n<p><strong>400(传参错误)，401(鉴权失效，未登录), 403(无权限)，404(没有找到该 URL)</strong></p>\n<h2 id=\"与-HTTP-协作的-web-服务器（代理、网关、隧-道）\"><a href=\"#与-HTTP-协作的-web-服务器（代理、网关、隧-道）\" class=\"headerlink\" title=\"与 HTTP 协作的 web 服务器（代理、网关、隧 道）\"></a>与 HTTP 协作的 web 服务器（代理、网关、隧 道）</h2><ol>\n<li>网关和代理基本功能差不多，但是当 HTTP 请求的对象不支持 HTTP 协议时，利用网关可以由 HTTP 请求转化为其他协议通信，利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信 线路上加密以确保连接的安全。比如，网关可以连接数据库，使用 SQL 语句查询数据。另外，在 Web 购物网站上进行信用卡结算时， 网关可以和信用卡结算系统联动。</li>\n<li>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等 加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的 通信。</li>\n</ol>\n<h2 id=\"HTTP-协议缺点\"><a href=\"#HTTP-协议缺点\" class=\"headerlink\" title=\"HTTP 协议缺点\"></a>HTTP 协议缺点</h2><ol>\n<li>通信使用明文（不加密），内容可能会被窃听(TSL,SSL 加密解决)</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装(SSL 加密提供证书)</li>\n<li>无法验证报文的完整性,内容有可能被篡改，也就是 DOS 中间人攻击(MD5 和 SHA-1 等散列值校验)</li>\n</ol>\n<h2 id=\"HTTP-加密\"><a href=\"#HTTP-加密\" class=\"headerlink\" title=\"HTTP 加密\"></a>HTTP 加密</h2><ol>\n<li>采用对称加密和非对称加密(公开密钥加密方式获取公钥，保证安全性，用共享密钥进行解密，提升速度， 共享密闭比公开密钥的速度快)</li>\n<li>HTTPS 采用混合加密机制 HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密 机制。若密钥能够实现安全交换，那么有可能会考虑仅使用公开 密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处 理速度要慢。 所以应充分利用两者各自的优势，将多种方法组合起来用于通 信。在交换密钥环节使用公开密钥加密方式，之后的建立通信交 换报文阶段则使用共享密钥加密方式。</li>\n</ol>\n<p>如何判断公开密钥的正确性？ 使用 CA 证书</p>\n","text":"HTTP权威指南...","permalink":"/post/Http权威指南阅读总结","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"http","slug":"http","count":2,"path":"api/categories/http.json"}],"tags":[{"name":"http","slug":"http","count":4,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-%E5%9F%BA%E7%A1%80%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">HTTP 基础分层架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E6%AF%8F%E4%B8%AA%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">请求过程每个层的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-1-1-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">HTTP&#x2F;1.1 特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-1-1-%E7%9A%84%E5%AE%A2%E6%88%B7%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">HTTP&#x2F;1.1 的客户身份认证方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-2-0-%E6%96%B0%E5%A2%9E\"><span class=\"toc-text\">HTTP&#x2F;2.0 新增</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-%E6%8A%A5%E6%96%87%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">HTTP 报文详解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">HTTP 状态码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E-HTTP-%E5%8D%8F%E4%BD%9C%E7%9A%84-web-%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%BB%A3%E7%90%86%E3%80%81%E7%BD%91%E5%85%B3%E3%80%81%E9%9A%A7-%E9%81%93%EF%BC%89\"><span class=\"toc-text\">与 HTTP 协作的 web 服务器（代理、网关、隧 道）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-%E5%8D%8F%E8%AE%AE%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">HTTP 协议缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP-%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">HTTP 加密</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"服务器之正向代理和反向代理","uid":"d02145c722134b6141381c5add87923b","slug":"服务器之正向代理和反向代理","date":"2021-07-27T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/服务器之正向代理和反向代理.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/http01.png","text":"最近公司商家入驻准备上线，和运维在服务器代理这边折腾了不少时间，现在重新归纳一下正向代理和反向代理的相关概念和区别 正向代理简述：正向代理服务器作接受来自客户端...","permalink":"/post/服务器之正向代理和反向代理","photos":[],"count_time":{"symbolsCount":908,"symbolsTime":"1 mins."},"categories":[{"name":"总结","slug":"总结","count":1,"path":"api/categories/总结.json"}],"tags":[{"name":"http","slug":"http","count":4,"path":"api/tags/http.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"懂表帝微信小程序授权流程总览","uid":"fb926e417168eb419b385ba9a5f127a1","slug":"懂表帝微信小程序授权流程总览","date":"2021-07-02T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/懂表帝微信小程序授权流程总览.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/auth.jpg","text":"之前微信小程序官方使用了新的 wx.getUserProfile 替换了旧的 wx.getUserInfo，因为做了很多小程序的登录授权，一段时间不接触之后又会...","permalink":"/post/懂表帝微信小程序授权流程总览","photos":[],"count_time":{"symbolsCount":487,"symbolsTime":"1 mins."},"categories":[{"name":"业务流程","slug":"业务流程","count":1,"path":"api/categories/业务流程.json"}],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}