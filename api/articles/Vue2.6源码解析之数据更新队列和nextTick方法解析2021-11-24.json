{"title":"Vue2.6源码解析之数据更新队列和nextTick方法解析","uid":"4d925ea8030231a2d81ae35ccafce2c7","slug":"Vue2.6源码解析之数据更新队列和nextTick方法解析2021-11-24","date":"2021-11-23T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue2.6源码解析之数据更新队列和nextTick方法解析2021-11-24.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","content":"<p>用了这么久的 Vue，我们都可以从官网上面知道，<strong>Vue 在更新 DOM 时是异步执行的,Vue 将开启一个队列，缓冲在同一事件循环中发生的所有数据变更,如果同一个 watcher 被多次触发，只会被推入到队列中一次</strong>，注: 首先要了解下 js 的事件循环和异步任务队列问题</p>\n<p>那么内部究竟是如何实现的呢，我们对源代码进行细纠，下面会省略一些不相关的代码。</p>\n<h2 id=\"提供第一个-template-范例\"><a href=\"#提供第一个-template-范例\" class=\"headerlink\" title=\"提供第一个 template 范例\"></a>提供第一个 template 范例</h2><p>如果看了我的事件循环的文章，那么就可以知道任务队列中的异步任务分 task 任务和 microTask 微任务，每一次执行 task 的时候都会执行清空该 task 下的同级 microtask，理解这个原理对源码理解有巨大作用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;setData&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; les &#125;&#125;/ &#123;&#123;time&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">uptime-day</span> <span class=\"attr\">:day</span>=<span class=\"string\">&quot;day&quot;</span> <span class=\"attr\">:les</span>=<span class=\"string\">&quot;les&quot;</span> <span class=\"attr\">:time</span>=<span class=\"string\">&quot;time&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> uptimeDay = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: [<span class=\"string\">&quot;time&quot;</span>, <span class=\"string\">&quot;les&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">isTrue</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isTrue</span> = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">uptimeDay</span>.<span class=\"property\">innerText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div @click=&quot;handleClick&quot; ref=&quot;uptimeDay&quot;&gt;&#123;&#123; les &#125;&#125; &#123;&#123; time &#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      uptimeDay,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">les</span>: <span class=\"string\">&quot;谢小谢&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">time</span>: <span class=\"string\">&quot;now&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">setData</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">les</span> = <span class=\"string\">&quot;谢谢谢&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">time</span> = <span class=\"string\">&quot;before&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里进行一步点击操作 调用 setData 函数</p>\n<h2 id=\"初始渲染逻辑粗略解读\"><a href=\"#初始渲染逻辑粗略解读\" class=\"headerlink\" title=\"初始渲染逻辑粗略解读\"></a>初始渲染逻辑粗略解读</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>看过源码的大概都知道，new Vue 之后的最后一步是调用 mountComponent 方法生成 Watcher 订阅者，watcher 传入了一个 updateComponent 函数（内部包含\\_update,render 方法）作为 getter,初始化时 Watcher 会调用其 getter 方法，进入内部逻辑调用 render 生成 vnode，调用\\_update 方法对 vnode 进行 patch 操作,具体请看下图。</p></blockquote>\n<p><img src=\"http://www.xiesmallxie.cn/20211103201626.png\"></p>\n<p>当前模板在\\_createElement 时，遇到子组件，判断是不是原生标签之后，会调用 Vue.extend 方法重头调用一次 Vue.prorotype.init 方法，所以当前会生成 2 个 Watcher。</p>\n<h2 id=\"着重看一下-queueWatcher-执行过程\"><a href=\"#着重看一下-queueWatcher-执行过程\" class=\"headerlink\" title=\"着重看一下 queueWatcher 执行过程\"></a>着重看一下 queueWatcher 执行过程</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/core/observer/scheduler.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大更新数量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX_UPDATE_COUNT</span> = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt; = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">activatedChildren</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Component</span>&gt; = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">has</span>: &#123; [<span class=\"attr\">key</span>: number]: ?<span class=\"literal\">true</span> &#125; = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">circular</span>: &#123; [<span class=\"attr\">key</span>: number]: number &#125; = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> waiting = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flushing = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">// 重置队列和刷新状态</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resetSchedulerState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  index = queue.<span class=\"property\">length</span> = activatedChildren.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  has = &#123;&#125;</span><br><span class=\"line\">  waiting = flushing = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> currentFlushTimestamp = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">getNow</span>: <span class=\"function\">() =&gt;</span> number = <span class=\"title class_\">Date</span>.<span class=\"property\">now</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushSchedulerQueue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置当前的时间戳</span></span><br><span class=\"line\">  currentFlushTimestamp = <span class=\"title function_\">getNow</span>()</span><br><span class=\"line\">  flushing = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> watcher, id</span><br><span class=\"line\">  <span class=\"comment\">// 所有watcher根据id升序排列</span></span><br><span class=\"line\">  <span class=\"comment\">// 疑问: 点解要排序？</span></span><br><span class=\"line\">  <span class=\"comment\">// 回答: 1. 组件是从父级更新到子级，组件的渲染顺序是优于父级的，如果某个组件在父组件的观察程序运行期间被销毁，则可以跳过</span></span><br><span class=\"line\">  queue.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.<span class=\"property\">id</span> - b.<span class=\"property\">id</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// queue长度随时变化</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    watcher = queue[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher.<span class=\"property\">before</span>) &#123;</span><br><span class=\"line\">      watcher.<span class=\"title function_\">before</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = watcher.<span class=\"property\">id</span></span><br><span class=\"line\">    has[id] = <span class=\"literal\">null</span></span><br><span class=\"line\">    watcher.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 保留上次缓存过和更新后的状态实例 为下次触发生命周期做准备</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> activatedQueue = activatedChildren.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> updatedQueue = queue.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 清空状态</span></span><br><span class=\"line\">  <span class=\"title function_\">resetSchedulerState</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置当前组件更activated状态</span></span><br><span class=\"line\">  <span class=\"title function_\">callActivatedHooks</span>(activatedQueue)</span><br><span class=\"line\">  <span class=\"comment\">// 设置当前组件为已更新状态</span></span><br><span class=\"line\">  <span class=\"title function_\">callUpdatedHooks</span>(updatedQueue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发生命周期</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callUpdatedHooks</span>(<span class=\"params\">queue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = queue.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = queue[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = watcher.<span class=\"property\">vm</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.<span class=\"property\">_watcher</span> === watcher &amp;&amp; vm.<span class=\"property\">_isMounted</span> &amp;&amp; !vm.<span class=\"property\">_isDestroyed</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;updated&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueActivatedComponent</span>(<span class=\"params\">vm: Component</span>) &#123;router-view)</span><br><span class=\"line\">  vm.<span class=\"property\">_inactive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  activatedChildren.<span class=\"title function_\">push</span>(vm)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callActivatedHooks</span>(<span class=\"params\">queue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    queue[i].<span class=\"property\">_inactive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">activateChildComponent</span>(queue[i], <span class=\"literal\">true</span> <span class=\"comment\">/* true */</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推watcher入栈</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueWatcher</span>(<span class=\"params\">watcher: Watcher</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = watcher.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前队列没有冲刷的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 把当前watcher加入队列</span></span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(watcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 已冲刷的和已经通过的就删除掉</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = queue.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].<span class=\"property\">id</span> &gt; watcher.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">        i--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      queue.<span class=\"title function_\">splice</span>(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 不是在等待中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">nextTick</span>(flushSchedulerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/core/util/next-tick.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> isUsingMicroTask = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> callbacks = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// timeFunc根据环境兼容处理使用任务或者微任务</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">  !isIE &amp;&amp;</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class=\"line\">  (<span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">    <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&quot;[object MutationObserverConstructor]&quot;</span>)</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span>(<span class=\"params\">cb?: <span class=\"built_in\">Function</span>, ctx?: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve;</span><br><span class=\"line\">  <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&quot;nextTick&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 非等待情况下</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"template-范例解读\"><a href=\"#template-范例解读\" class=\"headerlink\" title=\"template 范例解读\"></a>template 范例解读</h2><ol>\n<li>根据入口遍历，根组件和子组件会生成两个 watcher 实例，从父到子我们成为 watcher1， watcher2</li>\n<li>由上面的 template 可知，根组件#app 和子组件 uptimeDay 都绑定了事件，点击 uptimeDay 组件时，子组件 handleClick 方法已经进入整体 task 队列，内部 isTrue 为 true 时 setter 触发，进入 queueWatcher(watcher2),has[id]为 false,flushing 为 false 进入推入 queue 队列，调用 nextTick(flushSchedulerQueue: 简称该方法为 Fn1) ，nextTick 入栈后 callBack 推入 f1，默认 pending 为 false，调用 timeFunc，此时该函数进入 handleClick 这个 task 下的微任务队列里面，pending 变 true。</li>\n<li>随后，下方又调用了 this.$nextTick(() &#x3D;&gt; { console.log(this.$refs.ss.innerText); 简称该方法为 Fn2 }), Fn2 进入 nextTick 之后发现 pending &#x3D; true，所以被合并进入 callBacks 更新，pending &#x3D; false 子组件 patch 更新完成 queueWatcher。 初始化 重点: <strong>此时，props 传进来的值并没有更新影响到 dom，打印出来的对象是有滞后性的，必须打印普通类型的值才能正确显示</strong></li>\n<li>接着，事件冒泡到父级，setData 触发进入另外一个 task 队列，接着更改了 les,time 的值。触发 les 的 setter 更新进入 queueWatcher(watcher1)。首先 has[id]为 null, flushing 为 false, watcher1 被推入 queue 队列调用 nextTick，nextTick 内部 pending 为 false，执行 timeFunc，推入微任务队列挂起。随后 time 的 setter 被触发，后进入 queueWatcher，发现 has[id]为 true，waiting 为 true, 不推入队列。重点: <strong>此时，这里就是上文说的 watcher 被多次触发，只推入队列一次</strong>，接着 timeFunc 的微任务开始调用，进入 flushSchedulerQueue 完成更新</li>\n</ol>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li>同 watcher 内更新只更新一次，因为多个 data 改变时，第一次的 reRender 就可以拿到当前实例上的最新值了，无需耗费更多计算资源。</li>\n<li>如果外部组件修改，子组件没有绑定当前修改的属性，并且没有应用于 dom，那么也是不会更新到子组件的(这个得看一下 Observe 数据劫持和 patch 的过程才能了解)</li>\n<li>scheduler.js 中有一段代码是很值得玩味的</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/core/observer/scheduler.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// queue长度随时变化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">  watcher = queue[index];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (watcher.<span class=\"property\">before</span>) &#123;</span><br><span class=\"line\">    watcher.<span class=\"title function_\">before</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  id = watcher.<span class=\"property\">id</span>;</span><br><span class=\"line\">  has[id] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  watcher.<span class=\"title function_\">run</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里算是对上面第 4 步的补充，当根组件的实例更新后，子组件也会更新重新进入 queueWatcher，watcher2 会被推入 queue 队列，此时循环体内的 queue 长度增加, 会一层一层往下调用子组件的 watcher 的 run 方法不断地重新 render 来进行 patch 操作，直到没有子组件为止(为什么？因为 vnode 为组件类型时没有 children，无法 patch，必须得重新 render 解析组件)</p>\n","text":"用了这么久的 Vue，我们都可以从官网上面知道，Vue 在更新 DOM 时是异步执行的,Vue 将开启一个队列，缓冲在同一事件循环中发生的所有数据变更,如果同一...","permalink":"/post/Vue2.6源码解析之数据更新队列和nextTick方法解析2021-11-24","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":3,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":3,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":4,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BE%9B%E7%AC%AC%E4%B8%80%E4%B8%AA-template-%E8%8C%83%E4%BE%8B\"><span class=\"toc-text\">提供第一个 template 范例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E6%B8%B2%E6%9F%93%E9%80%BB%E8%BE%91%E7%B2%97%E7%95%A5%E8%A7%A3%E8%AF%BB\"><span class=\"toc-text\">初始渲染逻辑粗略解读</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9D%80%E9%87%8D%E7%9C%8B%E4%B8%80%E4%B8%8B-queueWatcher-%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">着重看一下 queueWatcher 执行过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#template-%E8%8C%83%E4%BE%8B%E8%A7%A3%E8%AF%BB\"><span class=\"toc-text\">template 范例解读</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol>","author":{"name":"May","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue.2.6源码分析之事件挂载和双向绑定原理","uid":"d36c9246f4e0462addbf95d33343891c","slug":"Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06","date":"2021-12-05T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"对于用 vue 的小伙伴来说，v-model 是 vue 开发过程中使用非常频繁的一个指令，它实现了数据的双向绑定。那么现在，我们就来探究一下发生双向绑定的过程...","permalink":"/post/Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":3,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":3,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":4,"path":"api/tags/Vue.json"}],"author":{"name":"May","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"服务器之正向代理和反向代理","uid":"d02145c722134b6141381c5add87923b","slug":"服务器之正向代理和反向代理","date":"2021-07-27T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/服务器之正向代理和反向代理.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/http01.png","text":"最近公司商家入驻准备上线，和运维在服务器代理这边折腾了不少时间，现在重新归纳一下正向代理和反向代理的相关概念和区别 正向代理简述：正向代理服务器作接受来自客户端...","permalink":"/post/服务器之正向代理和反向代理","photos":[],"count_time":{"symbolsCount":908,"symbolsTime":"1 mins."},"categories":[{"name":"总结","slug":"总结","count":1,"path":"api/categories/总结.json"}],"tags":[{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"}],"author":{"name":"May","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}