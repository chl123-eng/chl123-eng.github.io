{"title":"Vue-2-6源码分析之watcher原理","uid":"8af7d3fa7270a00dfbd22764626362d5","slug":"Vue-2-6源码分析之watcher原理-1","date":"2024-07-15T09:15:07.000Z","updated":"2024-07-16T01:58:57.406Z","comments":true,"path":"api/articles/Vue-2-6源码分析之watcher原理-1.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","content":"<h3 id=\"Watcher的种类是什么\"><a href=\"#Watcher的种类是什么\" class=\"headerlink\" title=\"Watcher的种类是什么\"></a>Watcher的种类是什么</h3><h4 id=\"Watcher的种类\"><a href=\"#Watcher的种类\" class=\"headerlink\" title=\"Watcher的种类\"></a>Watcher的种类</h4><div>\n  <ul>\n    <li>\n      <span style=\"background-color: #fff5f5;color: #ff502c;\">渲染Watcher</span> ：变量修改时，负责通知HTML里的重新渲染\n    </li>\n    <li>\n       <span style=\"background-color: #fff5f5;\n        color: #ff502c;\">computed Watcher</span> ：变量修改时，负责通知computed里依赖此变量的computed属性变量的修改\n    </li>\n     <li>\n       <span style=\"background-color: #fff5f5;\n        color: #ff502c;\">watch Watcher</span> ：变量修改时，负责通知watch属性里所对应的变量函数的执行\n    </li>\n  </ul>\n</div>\n\n\n<h3 id=\"实现数据响应式\"><a href=\"#实现数据响应式\" class=\"headerlink\" title=\"实现数据响应式\"></a>实现数据响应式</h3><div style=\"background-color: #fff5f5;color:#666;padding: 10px 20px; line-height: 40px\">\n任何类型的Watcher都是基于数据响应式的，也就是说，要想实现Watcher，就需要先实现数据响应式，而数据响应式的原理就是通过Object.defineProperty去劫持变量的get和set属性。\n<a href=\"Vue.2.6源码分析之响应式数据原理\">请移步[Vue.2.6源码分析之响应式数据原理]</a>。\n</div>\n\n<h4 id=\"什么是Dep？\"><a href=\"#什么是Dep？\" class=\"headerlink\" title=\"什么是Dep？\"></a>什么是Dep？</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例子代码，与本章代码无关</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name: &#x27;林三心&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        info () &#123;</span><br><span class=\"line\">            return this.name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        name(newVal) &#123;</span><br><span class=\"line\">            console.log(newVal)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里name变量被三个地方所依赖，三个地方代表了三种Watcher，那么name会直接自己管这三个Watcher吗？答案是不会的，name会实例一个Dep，来帮自己管这几个Wacther，类似于管家，当name更改的时候，会通知dep，而dep则会带着主人的命令去通知这些Wacther去完成自己该做的事</p>\n<p><img src=\"https://chlblog.oss-cn-guangzhou.aliyuncs.com/watcher1.png\"></p>\n<h4 id=\"Watcher为何也要反过来收集Dep？\"><a href=\"#Watcher为何也要反过来收集Dep？\" class=\"headerlink\" title=\"Watcher为何也要反过来收集Dep？\"></a>Watcher为何也要反过来收集Dep？</h4><p>上面说到了，dep是name的管家，他的职责是：name更新时，dep会带着主人的命令去通知subs里的Watcher去做该做的事，那么，dep收集Watcher很合理。那为什么watcher也需要反过来收集dep呢？这是因为computed属性里的变量没有自己的dep，也就是他没有自己的管家，看以下例子：</p>\n<div style=\"background-color: #fff5f5;color:#666;padding: 10px 20px; line-height: 40px\">\n这里先说一个知识点：如果html里不依赖name这个变量，那么无论name再怎么变，他都不会主动去刷新视图，因为html没引用他（说专业点就是：name的dep里没有渲染Watcher），注意，这里说的是不会主动，但这并不代表他不会被动去更新。什么情况下他会被动去更新呢？那就是computed有依赖他的属性变量。\n</div>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例子代码，与本章代码无关</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;&#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    person &#123;</span><br><span class=\"line\">        return `名称：$&#123;this.name&#125;`</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里的person事依赖于name的，但是person是没有自己的dep的（因为他是computed属性变量），而name是有的。好了，继续看，请注意，此例子html里只有person的引用没有name的引用，所以name一改变，按理说虽然person跟着变了，但是html不会重新渲染，因为name虽然有dep，有更新视图的能力，但是奈何人家html不引用他啊！person想要自己去更新视图，但他却没这个能力啊，毕竟他没有dep这个管家！这个时候computed Watcher里收集的name的dep就派上用场了，可以借助这些dep去更新视图，达到更新html里的person的效果。具体会在下面computed里实现。</p>\n<h3 id=\"Watcher的实现\"><a href=\"#Watcher的实现\" class=\"headerlink\" title=\"Watcher的实现\"></a>Watcher的实现</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; nextTick &#125; from &quot;../utils/nextTick&quot;;</span><br><span class=\"line\">import &#123; popTarget, pushTarget &#125; from &quot;./dep&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let id = 0</span><br><span class=\"line\">class watcher &#123;</span><br><span class=\"line\">    constructor(vm, exprOrfn,cb,options)&#123;</span><br><span class=\"line\">        this.vm = vm;</span><br><span class=\"line\">        this.exprOrfn = exprOrfn</span><br><span class=\"line\">        this.cb = cb</span><br><span class=\"line\">        this.options = options</span><br><span class=\"line\">        this.id = id++</span><br><span class=\"line\">        this.user = !!options.user</span><br><span class=\"line\">        this.deps = [] //watcher存放dep</span><br><span class=\"line\">        this.depsId = new Set()</span><br><span class=\"line\"></span><br><span class=\"line\">        if(typeof exprOrfn === &quot;function&quot;)&#123;</span><br><span class=\"line\">            this.getter = exprOrfn</span><br><span class=\"line\">        &#125;else&#123;//字符串变成函数</span><br><span class=\"line\">            this.getter = function()&#123;//属性c.c.c</span><br><span class=\"line\">                let path = exprOrfn.split(&#x27;.&#x27;);</span><br><span class=\"line\">                let obj = vm;</span><br><span class=\"line\">                for(let i = 0; i &lt; path.length; i++)&#123;</span><br><span class=\"line\">                    obj = obj[path[i]]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return obj;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //第一次渲染页面</span><br><span class=\"line\">        this.value = this.get(); //获取watch旧值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    addDep(dep)&#123;</span><br><span class=\"line\">        //1、去重</span><br><span class=\"line\">        let id = dep.id</span><br><span class=\"line\">        if(!this.depsId.has(id))&#123;</span><br><span class=\"line\">            this.deps.push(dep)</span><br><span class=\"line\">            this.depsId.add(id)</span><br><span class=\"line\">            dep.addSub(this)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //更新数据</span><br><span class=\"line\">    run()&#123;</span><br><span class=\"line\">        let value = this.get() //watch新值</span><br><span class=\"line\">        this.oldValue  = this.value</span><br><span class=\"line\">        this.value = value</span><br><span class=\"line\">        if(this.user)&#123;</span><br><span class=\"line\">            this.cb.call(this.vm,value,this.oldValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get()&#123;</span><br><span class=\"line\">        pushTarget(this);</span><br><span class=\"line\">        const value = this.getter()//初次更新获取到原始的值</span><br><span class=\"line\">        popTarget();</span><br><span class=\"line\">        return value</span><br><span class=\"line\"></span><br><span class=\"line\">        // queueWatcher(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //更新</span><br><span class=\"line\">    update()&#123;</span><br><span class=\"line\">        //实现：不要数据更新一次就调用一次</span><br><span class=\"line\">        //方式：缓存</span><br><span class=\"line\">        // this.getter()</span><br><span class=\"line\">        queueWatcher(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let queue = [];//将需要批量更新的watcher存放到一个队列中</span><br><span class=\"line\">let has = &#123;&#125;;</span><br><span class=\"line\">let pending = false</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function flushWatcher()&#123;</span><br><span class=\"line\">    queue.forEach(item =&gt; &#123;item.run(),item.cb()&#125;)</span><br><span class=\"line\">    queue = [];</span><br><span class=\"line\">    has = &#123;&#125;</span><br><span class=\"line\">    pending = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function queueWatcher(watcher)&#123;</span><br><span class=\"line\">    let id = watcher.id //每个组件共用同一个watcher</span><br><span class=\"line\">    if(!has[id])&#123;//去重</span><br><span class=\"line\">        queue.push(watcher);</span><br><span class=\"line\">        has[id] = true;</span><br><span class=\"line\">        //防抖</span><br><span class=\"line\">        if(!pending)&#123;</span><br><span class=\"line\">            nextTick(flushWatcher) //相当于定时器,异步</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        pending = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default watcher</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"渲染Watcher：初始化渲染数据\"><a href=\"#渲染Watcher：初始化渲染数据\" class=\"headerlink\" title=\"渲染Watcher：初始化渲染数据\"></a>渲染Watcher：初始化渲染数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //lifecycle.js</span><br><span class=\"line\">  export function mountComponent(vm,el)&#123;</span><br><span class=\"line\">    //1、vm.render将render函数变成vnode</span><br><span class=\"line\">    //2、vm._update将vnode变成真实dom</span><br><span class=\"line\">    // vm._update(vm._render())</span><br><span class=\"line\"></span><br><span class=\"line\">    let updateComponent = () =&gt; &#123;</span><br><span class=\"line\">        vm._update(vm._render())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new watcher(vm,updateComponent, ()=&gt;&#123;</span><br><span class=\"line\">    &#125;, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"watch-Watcher-更新数据\"><a href=\"#watch-Watcher-更新数据\" class=\"headerlink\" title=\"watch Watcher: 更新数据\"></a>watch Watcher: 更新数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//initState.js</span><br><span class=\"line\">//watch Watcher关键：user: true</span><br><span class=\"line\">vm.prototype.$watch = function(Vue,exprOfn,handler,options) &#123;</span><br><span class=\"line\">    let watcher = new Watcher(Vue, exprOfn, handler, &#123;...options,user:true&#125;);</span><br><span class=\"line\">    if(options.immediate)&#123;</span><br><span class=\"line\">        handler.call(vm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"Watcher的种类是什么Watcher的种类 渲染Watcher ：变量修改时，负责通知HTML里的重新渲染 computed Watcher ：变量修改时，...","permalink":"/post/Vue-2-6源码分析之watcher原理-1","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":4,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":4,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"},{"name":"Vue源码","slug":"Vue源码","count":4,"path":"api/tags/Vue源码.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Watcher%E7%9A%84%E7%A7%8D%E7%B1%BB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Watcher的种类是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Watcher%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">Watcher的种类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F\"><span class=\"toc-text\">实现数据响应式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFDep%EF%BC%9F\"><span class=\"toc-text\">什么是Dep？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Watcher%E4%B8%BA%E4%BD%95%E4%B9%9F%E8%A6%81%E5%8F%8D%E8%BF%87%E6%9D%A5%E6%94%B6%E9%9B%86Dep%EF%BC%9F\"><span class=\"toc-text\">Watcher为何也要反过来收集Dep？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Watcher%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Watcher的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%B2%E6%9F%93Watcher%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">渲染Watcher：初始化渲染数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#watch-Watcher-%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">watch Watcher: 更新数据</span></a></li></ol>","author":{"name":"May","slug":"blog-author","avatar":"https://chlblog.oss-cn-guangzhou.aliyuncs.com/logo.jpg","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue.2.6源码分析之响应式数据原理","uid":"e0084657f452526ce5e427bc65b7869d","slug":"Vue.2.6源码分析之响应式数据原理","date":"2024-07-19T16:00:00.000Z","updated":"2024-07-10T08:03:54.277Z","comments":true,"path":"api/articles/Vue.2.6源码分析之响应式数据原理.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"前言响应式 是 Vue 最独特的特性之一。当修改实例的 data 的属性时，视图会进行更新。vue2 的数据劫持是利用 Object.definePropert...","permalink":"/post/Vue.2.6源码分析之响应式数据原理","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":4,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":4,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"},{"name":"Vue源码","slug":"Vue源码","count":4,"path":"api/tags/Vue源码.json"}],"author":{"name":"May","slug":"blog-author","avatar":"https://chlblog.oss-cn-guangzhou.aliyuncs.com/logo.jpg","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue.2.6源码分析之nextTick原理","uid":"f6b138999f3f27abf400958100e01e94","slug":"Vue-2-6源码分析之nextTick原理","date":"2024-07-10T08:03:25.000Z","updated":"2024-07-10T08:39:01.017Z","comments":true,"path":"api/articles/Vue-2-6源码分析之nextTick原理.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"前言Vue.js 中的 $nextTick 函数是一个非常重要的 API，它用于延迟回调的执行直到下次 DOM 更新循环之后。简单来说，$nextTick 会在...","permalink":"/post/Vue-2-6源码分析之nextTick原理","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Vue","slug":"Vue","count":4,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":4,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":4,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":5,"path":"api/tags/Vue.json"},{"name":"Vue源码","slug":"Vue源码","count":4,"path":"api/tags/Vue源码.json"}],"author":{"name":"May","slug":"blog-author","avatar":"https://chlblog.oss-cn-guangzhou.aliyuncs.com/logo.jpg","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}