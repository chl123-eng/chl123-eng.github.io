{"title":"Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑","uid":"b5ff54a9d086ee4b944aa5321b46f563","slug":"Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03","date":"2022-02-02T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","content":"<p>对于很多用过 vue 这个框架的人来说，想必都用过 keep-alive 组件缓存功能。vue 内部使用了 LRU 缓存淘汰算法来实现组件的缓存更新问题，那 vue 是如何实现这个 keep-alive 组件的逻辑呢，我们来解析一下。</p>\n<h2 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取vnode实例名称</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getComponentName</span>(<span class=\"params\">opts: ?VNodeComponentOptions</span>): ?string &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> opts &amp;&amp; (opts.<span class=\"property\">Ctor</span>.<span class=\"property\">options</span>.<span class=\"property\">name</span> || opts.<span class=\"property\">tag</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 匹配当前队列里面是否存在该vnode</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">matches</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  pattern: string | <span class=\"built_in\">RegExp</span> | <span class=\"built_in\">Array</span>&lt;string&gt;,</span></span><br><span class=\"line\"><span class=\"params\">  name: string</span></span><br><span class=\"line\"><span class=\"params\"></span>): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(pattern)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pattern.<span class=\"title function_\">indexOf</span>(name) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pattern === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pattern.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;,&quot;</span>).<span class=\"title function_\">indexOf</span>(name) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isRegExp</span>(pattern)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pattern.<span class=\"title function_\">test</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例筛选</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pruneCache</span>(<span class=\"params\">keepAliveInstance: any, filter: <span class=\"built_in\">Function</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> cache) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">entry</span>: ?<span class=\"title class_\">CacheEntry</span> = cache[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">name</span>: ?string = entry.<span class=\"property\">name</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (name &amp;&amp; !<span class=\"title function_\">filter</span>(name)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">pruneCacheEntry</span>(cache, key, keys, _vnode);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pruneCacheEntry</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  cache: CacheEntryMap,</span></span><br><span class=\"line\"><span class=\"params\">  key: string,</span></span><br><span class=\"line\"><span class=\"params\">  keys: <span class=\"built_in\">Array</span>&lt;string&gt;,</span></span><br><span class=\"line\"><span class=\"params\">  current?: VNode</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">entry</span>: ?<span class=\"title class_\">CacheEntry</span> = cache[key];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entry &amp;&amp; (!current || entry.<span class=\"property\">tag</span> !== current.<span class=\"property\">tag</span>)) &#123;</span><br><span class=\"line\">    entry.<span class=\"property\">componentInstance</span>.$destroy();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cache[key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(keys, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;keep-alive&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">abstract</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">include</span>: patternTypes,</span><br><span class=\"line\">    <span class=\"attr\">exclude</span>: patternTypes,</span><br><span class=\"line\">    <span class=\"attr\">max</span>: [<span class=\"title class_\">String</span>, <span class=\"title class_\">Number</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 虚拟dom缓存</span></span><br><span class=\"line\">    <span class=\"title function_\">cacheVNode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys, vnodeToCache, keyToCache &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在等待被缓存的vnode 就要缓存起来</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vnodeToCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; tag, componentInstance, componentOptions &#125; = vnodeToCache;</span><br><span class=\"line\">        cache[keyToCache] = &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"title function_\">getComponentName</span>(componentOptions),</span><br><span class=\"line\">          tag,</span><br><span class=\"line\">          componentInstance,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 推vnode的key进入缓存组</span></span><br><span class=\"line\">        keys.<span class=\"title function_\">push</span>(keyToCache);</span><br><span class=\"line\">        <span class=\"comment\">// 如果缓存组件有最大数量限制的情况下 并且超大最大缓存数量限制，那么就删除缓存队列的第一项</span></span><br><span class=\"line\">        <span class=\"comment\">// pruneCacheEntry 判断了当前的缓存队列的第一项是 如果跟新进来的最新vnode是否一致，</span></span><br><span class=\"line\">        <span class=\"comment\">// 不一致的情况下就直接卸载当前第一项的实例，一致就保存不进行卸载进行复用操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">max</span> &amp;&amp; keys.<span class=\"property\">length</span> &gt; <span class=\"built_in\">parseInt</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">max</span>)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">pruneCacheEntry</span>(cache, keys[<span class=\"number\">0</span>], keys, <span class=\"variable language_\">this</span>.<span class=\"property\">_vnode</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">vnodeToCache</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储所有组件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 存储所有组件的cid值 源码里面是逐步递增的</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span> = [];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">destroyed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 卸载时删除所有缓存的组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">pruneCacheEntry</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>, key, <span class=\"variable language_\">this</span>.<span class=\"property\">keys</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始缓存当前实例</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheVNode</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 监听include和exclude队列，去除里面不匹配的的组件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$watch(<span class=\"string\">&quot;include&quot;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">pruneCache</span>(<span class=\"variable language_\">this</span>, <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"title function_\">matches</span>(val, name));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$watch(<span class=\"string\">&quot;exclude&quot;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">pruneCache</span>(<span class=\"variable language_\">this</span>, <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> !<span class=\"title function_\">matches</span>(val, name));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">updated</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新的时候同步更新当前vnode</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">cacheVNode</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slot = <span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>.<span class=\"property\">default</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">vnode</span>: <span class=\"title class_\">VNode</span> = <span class=\"title function_\">getFirstComponentChild</span>(slot);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">componentOptions</span>: ?<span class=\"title class_\">VNodeComponentOptions</span> =</span><br><span class=\"line\">      vnode &amp;&amp; vnode.<span class=\"property\">componentOptions</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentOptions) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// check pattern</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">name</span>: ?string = <span class=\"title function_\">getComponentName</span>(componentOptions);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; include, exclude &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不缓存的列表有当前vnode或者缓存列表没有当前vnode 那么就直接返回该节点</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (include &amp;&amp; (!name || !<span class=\"title function_\">matches</span>(include, name))) ||</span><br><span class=\"line\">        (exclude &amp;&amp; name &amp;&amp; <span class=\"title function_\">matches</span>(exclude, name))</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 到这里就说明当前组件是需要缓存的</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; cache, keys &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">key</span>: ?string =</span><br><span class=\"line\">        vnode.<span class=\"property\">key</span> == <span class=\"literal\">null</span></span><br><span class=\"line\">          ? componentOptions.<span class=\"property\">Ctor</span>.<span class=\"property\">cid</span> +</span><br><span class=\"line\">            (componentOptions.<span class=\"property\">tag</span> ? <span class=\"string\">`::<span class=\"subst\">$&#123;componentOptions.tag&#125;</span>`</span> : <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">          : vnode.<span class=\"property\">key</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前组件被缓存过 那么就更新当前组件 把组件推到缓存队列key的最后边，</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样就能总是获取到最新的更新项 LRU算法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[key]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 复用缓存</span></span><br><span class=\"line\">        vnode.<span class=\"property\">componentInstance</span> = cache[key].<span class=\"property\">componentInstance</span>;</span><br><span class=\"line\">        <span class=\"title function_\">remove</span>(keys, key);</span><br><span class=\"line\">        keys.<span class=\"title function_\">push</span>(key);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">vnodeToCache</span> = vnode;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">keyToCache</span> = key;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      vnode.<span class=\"property\">data</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode || (slot &amp;&amp; slot[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说说-LRU-缓存淘汰算法\"><a href=\"#说说-LRU-缓存淘汰算法\" class=\"headerlink\" title=\"说说 LRU 缓存淘汰算法\"></a>说说 LRU 缓存淘汰算法</h2><p>LRU 算法，即最近最久未使用，是一种非常常见的缓存淘汰算法。<br>算法的设计原则： 如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。</p>\n<p>下面是我自己画的 keep-alive 缓存淘汰算法的流程示意图例，辅助查看</p>\n<p><img src=\"http://www.xiesmallxie.cn/20220209112855.png\"></p>\n","text":"对于很多用过 vue 这个框架的人来说，想必都用过 keep-alive 组件缓存功能。vue 内部使用了 LRU 缓存淘汰算法来实现组件的缓存更新问题，那 v...","permalink":"/post/Vue2.6系列源码解析之Keep-Alive组件的缓存逻辑2022-02-03","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB\"><span class=\"toc-text\">源码解读</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E8%AF%B4-LRU-%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">说说 LRU 缓存淘汰算法</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue3源码 实例初始化过程详解","uid":"8244f2f98fb7537fa6df6a08feffa028","slug":"Vue3源码 实例初始化过程详解","date":"2022-02-23T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue3源码 实例初始化过程详解.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"自己接触 Vue3 也有一段时间了 之前一直有看相关的源码，现在总结下 creatApp 到 mount 挂载中间发生了什么 下面的代码均为精简版 删掉了部分不...","permalink":"/post/Vue3源码 实例初始化过程详解","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue3","slug":"Vue3","count":2,"path":"api/tags/Vue3.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vue2.6源码解析之diff算法更新过程及其相关问题","uid":"d808854a301e8b255f9b814d0115997a","slug":"Vue2.6源码解析之diff算法更新过程及其相关问题","date":"2021-12-25T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue2.6源码解析之diff算法更新过程及其相关问题.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","text":"每次面试都会被面试官问到 diff 算法，每次都看别人文章，过了就忘。最近抽空自己看看源码，自己在不借助其他人文章思路的情况下，自己死磕源码，总结出自己的一些心...","permalink":"/post/Vue2.6源码解析之diff算法更新过程及其相关问题","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}