{"title":"Vue.2.6源码分析之事件挂载和双向绑定原理","uid":"d36c9246f4e0462addbf95d33343891c","slug":"Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06","date":"2021-12-05T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/vue-01.jpg","content":"<p>对于用 vue 的小伙伴来说，v-model 是 vue 开发过程中使用非常频繁的一个指令，它实现了数据的双向绑定。那么现在，我们就来探究一下发生双向绑定的过程是如何实现的</p>\n<h2 id=\"设想一下绑定过程\"><a href=\"#设想一下绑定过程\" class=\"headerlink\" title=\"设想一下绑定过程\"></a>设想一下绑定过程</h2><p>我们都知道，传入 data 的数据会被 Object.defineProperty 转化成 getter,setter<br>进行监听，v-model 则是需要 input 框支持。当 input 输入时，view 层的数据也会随之动态改变，那么很明显是需要通过一个事件监听方法来触发的。当数据层被触发时，响应，那事件监听事件是在啥时候就开始挂载事件的呢?</p>\n<h2 id=\"看看源码中事件怎么监听的\"><a href=\"#看看源码中事件怎么监听的\" class=\"headerlink\" title=\"看看源码中事件怎么监听的\"></a>看看源码中事件怎么监听的</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src\\\\platforms\\\\web\\\\compiler\\\\directives\\\\model.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genDefaultModel</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el: ASTElement,</span></span><br><span class=\"line\"><span class=\"params\">  value: string,</span></span><br><span class=\"line\"><span class=\"params\">  modifiers: ?ASTModifiers</span></span><br><span class=\"line\"><span class=\"params\"></span>): ?boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = el.<span class=\"property\">attrsMap</span>.<span class=\"property\">type</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; lazy, number, trim &#125; = modifiers || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 没有携带lazy修饰符并且input类型伟range时就需要进行compsition检测</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> needCompositionGuard = !lazy &amp;&amp; type !== <span class=\"string\">&quot;range&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1.如果v-model携带lazy修饰符，那么就自动转成change事件</span></span><br><span class=\"line\">  <span class=\"comment\">// change和input事件的区别: https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event</span></span><br><span class=\"line\">  <span class=\"comment\">// 2.如果不是滑块类型的input 那么就默认是input事件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> event = lazy ? <span class=\"string\">&quot;change&quot;</span> : type === <span class=\"string\">&quot;range&quot;</span> ? <span class=\"variable constant_\">RANGE_TOKEN</span> : <span class=\"string\">&quot;input&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 拼装执行语句</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> valueExpression = <span class=\"string\">&quot;$event.target.value&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (trim) &#123;</span><br><span class=\"line\">    valueExpression = <span class=\"string\">`$event.target.value.trim()`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (number) &#123;</span><br><span class=\"line\">    valueExpression = <span class=\"string\">`_n(<span class=\"subst\">$&#123;valueExpression&#125;</span>)`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 调用genAssignmentCode语句重组</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果value有值，实际上调用的是this.$set方法</span></span><br><span class=\"line\">  <span class=\"comment\">// if($event.target.composing)return;$set(day, key, $event.target.value)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> code = <span class=\"title function_\">genAssignmentCode</span>(value, valueExpression);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (needCompositionGuard) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// composition事件 即输入法编辑器编辑时 就直接返回空</span></span><br><span class=\"line\">    code = <span class=\"string\">`if($event.target.composing)return;<span class=\"subst\">$&#123;code&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">addProp</span>(el, <span class=\"string\">&quot;value&quot;</span>, <span class=\"string\">`(<span class=\"subst\">$&#123;value&#125;</span>)`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 增加监听事件</span></span><br><span class=\"line\">  <span class=\"title function_\">addHandler</span>(el, event, code, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 如果修饰符是trim或number那么应当立即强制更新</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (trim || number) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addHandler</span>(el, <span class=\"string\">&quot;blur&quot;</span>, <span class=\"string\">&quot;$forceUpdate()&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src\\\\compiler\\\\helpers.js 塞进对象</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">addHandler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el: ASTElement,</span></span><br><span class=\"line\"><span class=\"params\">  name: string,</span></span><br><span class=\"line\"><span class=\"params\">  value: string,</span></span><br><span class=\"line\"><span class=\"params\">  modifiers: ?ASTModifiers,</span></span><br><span class=\"line\"><span class=\"params\">  important?: boolean,</span></span><br><span class=\"line\"><span class=\"params\">  warn?: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">  range?: Range,</span></span><br><span class=\"line\"><span class=\"params\">  dynamic?: boolean</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  modifiers = modifiers || emptyObject;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> events;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (modifiers.<span class=\"property\">native</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> modifiers.<span class=\"property\">native</span>;</span><br><span class=\"line\">    events = el.<span class=\"property\">nativeEvents</span> || (el.<span class=\"property\">nativeEvents</span> = &#123;&#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    events = el.<span class=\"property\">events</span> || (el.<span class=\"property\">events</span> = &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 普通input状态下 返回了&#123; value: value.trim()&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">newHandler</span>: any = <span class=\"title function_\">rangeSetItem</span>(&#123; <span class=\"attr\">value</span>: value.<span class=\"title function_\">trim</span>(), dynamic &#125;, range);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (modifiers !== emptyObject) &#123;</span><br><span class=\"line\">    newHandler.<span class=\"property\">modifiers</span> = modifiers;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 对象塞入当前监听事件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handlers = events[name];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(handlers)) &#123;</span><br><span class=\"line\">    important ? handlers.<span class=\"title function_\">unshift</span>(newHandler) : handlers.<span class=\"title function_\">push</span>(newHandler);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    events[name] = newHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  el.<span class=\"property\">plain</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/platforms/web/runtime/modules/events.js 生成vnode后增加事件监听</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  name: string,</span></span><br><span class=\"line\"><span class=\"params\">  handler: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">  capture: boolean,</span></span><br><span class=\"line\"><span class=\"params\">  passive: boolean</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (useMicrotaskFix) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attachedTimestamp = currentFlushTimestamp;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> original = handler;</span><br><span class=\"line\">    handler = original.<span class=\"property\">_wrapper</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        e.<span class=\"property\">target</span> === e.<span class=\"property\">currentTarget</span> ||</span><br><span class=\"line\">        e.<span class=\"property\">timeStamp</span> &gt;= attachedTimestamp ||</span><br><span class=\"line\">        e.<span class=\"property\">timeStamp</span> &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        e.<span class=\"property\">target</span>.<span class=\"property\">ownerDocument</span> !== <span class=\"variable language_\">document</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> original.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 增加事件监听</span></span><br><span class=\"line\">  target.<span class=\"title function_\">addEventListener</span>(</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    supportsPassive ? &#123; capture, passive &#125; : capture</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由上面结合源码可知，在 compiler 编译模板之后生成 ast 语法，生成 ast 语法后会对当前 ast 调用 generate 方法进行一次格式化生成 render 函数，<br>在 patch 阶段调用 updateDOMListeners 挂载当前监听方法，下面是我总结出来的事件编译挂载的流程图</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211206102405.png\"></p>\n<h2 id=\"再来看看如何数据的更新监听\"><a href=\"#再来看看如何数据的更新监听\" class=\"headerlink\" title=\"再来看看如何数据的更新监听\"></a>再来看看如何数据的更新监听</h2><p>要想实现数据监听，实时变化。vue2.6 中的策略是这样的，通过 Observer 使用 Object.defineProperty 遍历劫持 data 对象的所有属性，为每个属性生成一个 Dep 消息订阅器，并且在后续挂载中生成一个 Watcher 观察者实例，当第一次调用 render 函数解析模板时，会扫描到模板里面绑定的每个属性，从而触发当前属性的 getter，把当前 Watcher 加入到每个对象的 Dep 的 sub 列表里面，当属性更新之后会就会调用当前属性的 Dep，调用其 sub 里面每个 watcher 的 update 函数来实现更新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现依赖收集器</span></span><br><span class=\"line\"><span class=\"comment\">// src/core/observer/dep.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">remove</span>(<span class=\"params\">list, item</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = list.<span class=\"title function_\">indexOf</span>(item);</span><br><span class=\"line\">  list.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sub</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 订阅所有依赖</span></span><br><span class=\"line\">  <span class=\"title function_\">depend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>);</span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addSub</span>(<span class=\"params\">watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sub</span>.<span class=\"title function_\">push</span>(watcher);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">removeSub</span>(<span class=\"params\">watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">sub</span>, watcher);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">sub</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sub</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> watcher.<span class=\"title function_\">update</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\">taget</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetStack = [];</span><br><span class=\"line\"><span class=\"comment\">// 赋值Dep.target主要是为了禁止某些getter依赖项触发到</span></span><br><span class=\"line\"><span class=\"comment\">// Dep.target有值时才能触发depend方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span>(<span class=\"params\">watcher</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = watcher;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">push</span>(watcher);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现</span></span><br><span class=\"line\"><span class=\"comment\">// src/core/observer/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">observe</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ob;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是对象，就对其进行监听</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isObject</span>(data)) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化依赖收集器</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data)) &#123;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 监听内部的每一个key</span></span><br><span class=\"line\">  <span class=\"title function_\">walk</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keyList = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keyList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive</span>(data, keyList[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">data, key, value</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 没有传value时默认初始化value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    value = data[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历子项</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> child = <span class=\"title function_\">observe</span>(data[key]);</span><br><span class=\"line\">  <span class=\"comment\">// 对内部每个key进行一次代理</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 可枚举</span></span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不能再define</span></span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 依赖收集器和watcher互相绑定</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child) &#123;</span><br><span class=\"line\">          child.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 新旧值不同的情况下就直接更新当前函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue !== value) &#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">        child = <span class=\"title function_\">observe</span>(data[key]);</span><br><span class=\"line\">        dep.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">vm, expOrFn, cb, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = ++id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">expOrFn</span> = expOrFn;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = options.<span class=\"property\">lazy</span> || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = options.<span class=\"property\">lazy</span> || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 新旧队列</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIdList</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depList</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(expOrFn);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">expOrFn</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">        ? <span class=\"variable language_\">this</span>.<span class=\"property\">expOrFn</span></span><br><span class=\"line\">        : <span class=\"title function_\">createExpOrFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">expOrFn</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addDep</span>(<span class=\"params\">dep</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 收集最新的依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span>.<span class=\"title function_\">includes</span>(dep.<span class=\"property\">id</span>)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span>.<span class=\"title function_\">push</span>(dep.<span class=\"property\">id</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span>.<span class=\"title function_\">add</span>(dep);</span><br><span class=\"line\">      <span class=\"comment\">// 如果队列里面没有</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIdList</span>.<span class=\"title function_\">includes</span>(dep.<span class=\"property\">id</span>)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 单纯获取最新的值</span></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanDepQueue</span>();</span><br><span class=\"line\">      <span class=\"title function_\">popTarget</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;清除了&quot;</span>, value, <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 更新</span></span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">cleanDepQueue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 收集了新的依赖 如果新的依赖里面没有旧的 那就从旧的依赖里面去掉</span></span><br><span class=\"line\">    <span class=\"comment\">// 试想一下 页面的绑定了一个值,并且设置了一个v-if指令，在下一次渲染之后，</span></span><br><span class=\"line\">    <span class=\"comment\">// v-if=\\&quot;false\\&quot;不渲染了 但是上一个的依赖却已经被追踪了,这样就</span></span><br><span class=\"line\">    <span class=\"comment\">// 会追踪额外的依赖项了，所以必须要清除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dep <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">depList</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span>.<span class=\"title function_\">has</span>(dep)) &#123;</span><br><span class=\"line\">        dep.<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 新的赋值给旧的  清空新依赖列表 新旧对比</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">depList</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depList</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span> = current;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepList</span>.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    current = <span class=\"variable language_\">this</span>.<span class=\"property\">depIdList</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">depIdList</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span> = current;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIdList</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果看不太懂的话可以参考我自己写的这一份链接 <a href=\"https://github.com/ShuHongXie/vue2.6-mvvm-example.git\">new Vue 双向绑定示例</a></p>\n<h2 id=\"流程图展示\"><a href=\"#流程图展示\" class=\"headerlink\" title=\"流程图展示\"></a>流程图展示</h2><p>下面是我自己绘制的流程图，可以通过这张图的调用顺序更简明地了解更新逻辑</p>\n<p><img src=\"http://www.xiesmallxie.cn/20211206150549.png\"></p>\n<h2 id=\"额外的一些注意点\"><a href=\"#额外的一些注意点\" class=\"headerlink\" title=\"额外的一些注意点\"></a>额外的一些注意点</h2><p>当前实例并没有关注到一些性能上的优化点，一个一个地说明会导致篇幅太长，相关的性能处理在上面的 github 示例链接里面，各位小伙伴有兴趣的话可以点击一下查看，帮我点个 star。</p>\n<p>另外可以看看我的其他文章，有一些内容会和当前内容有辅助功能，涉及到了优化相关。</p>\n<ol>\n<li><a href=\"https://xiesmallxie.cn/article/nextTick\">Vue2.6 源码解析之数据更新队列和 nextTick 方法解析</a></li>\n<li><a href=\"https://xiesmallxie.cn/article/vue-diff\">Vue2.6 源码解析之 diff 算法更新过程及其相关问题</a></li>\n</ol>\n","text":"对于用 vue 的小伙伴来说，v-model 是 vue 开发过程中使用非常频繁的一个指令，它实现了数据的双向绑定。那么现在，我们就来探究一下发生双向绑定的过程...","permalink":"/post/Vue.2.6源码分析之事件挂载和双向绑定原理2021-12-06","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Vue","slug":"Vue","count":6,"path":"api/categories/Vue.json"},{"name":"总结","slug":"Vue/总结","count":6,"path":"api/categories/Vue/总结.json"},{"name":"Vue源码","slug":"Vue/总结/Vue源码","count":5,"path":"api/categories/Vue/总结/Vue源码.json"}],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E6%83%B3%E4%B8%80%E4%B8%8B%E7%BB%91%E5%AE%9A%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">设想一下绑定过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9C%8B%E7%9C%8B%E6%BA%90%E7%A0%81%E4%B8%AD%E4%BA%8B%E4%BB%B6%E6%80%8E%E4%B9%88%E7%9B%91%E5%90%AC%E7%9A%84\"><span class=\"toc-text\">看看源码中事件怎么监听的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%8D%E6%9D%A5%E7%9C%8B%E7%9C%8B%E5%A6%82%E4%BD%95%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9B%B4%E6%96%B0%E7%9B%91%E5%90%AC\"><span class=\"toc-text\">再来看看如何数据的更新监听</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">流程图展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%9D%E5%A4%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">额外的一些注意点</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"总结下前段时间公司项目中的Better-scroll封装","uid":"92857319a9a1729d512b153f0e035994","slug":"总结下前段时间公司项目中的Better-scroll封装","date":"2021-12-21T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/总结下前段时间公司项目中的Better-scroll封装.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/bs01.png","text":"总结下自己前一段时间公司项目使用 Better-scroll 进行总体封装，集成下拉刷新,上拉加载等 12345678910111213141516171819...","permalink":"/post/总结下前段时间公司项目中的Better-scroll封装","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"vue","slug":"vue","count":1,"path":"api/categories/vue.json"},{"name":"经验","slug":"vue/经验","count":1,"path":"api/categories/vue/经验.json"}],"tags":[{"name":"better-scroll","slug":"better-scroll","count":2,"path":"api/tags/better-scroll.json"},{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nuxt.js线上部署","uid":"a4e456e8c96d4967cd68b187c93c51dc","slug":"Next.js线上部署2021-12-04","date":"2021-12-03T16:00:00.000Z","updated":"2024-06-07T03:20:18.000Z","comments":true,"path":"api/articles/Next.js线上部署2021-12-04.json","keywords":"蔡惠霖的博客，前端开发，Vue，Node.js","cover":"(https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/nuxt01.jpeg","text":"前段时间自己用 Next.js 的项目部署上线了，记录下 Next.js 的部署方式...","permalink":"/post/Next.js线上部署2021-12-04","photos":[],"count_time":{"symbolsCount":409,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":8,"path":"api/tags/Vue.json"},{"name":"服务端渲染","slug":"服务端渲染","count":1,"path":"api/tags/服务端渲染.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}